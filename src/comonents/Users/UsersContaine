import React from 'react';
import Users from './Users';
import { connect } from 'react-redux'
import { setCurrentPageActionCreator, getUsersThunkCreator, followThunkCreator, unFollowThunkCreator } from '../../redux/userReducer';
import MyPreloader from '../UI/MyPreloader/MyPreloader';
import { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getTotalUsersCount, getUsersSelector, } from '../../redux/usersSelectors';
import { UserType } from '../../types/types';
import { AppStateType } from '../../redux/redux-store';

type PropsType = {
    currentPage: number
    pageSize: number
    totalUsersCount: number
    usersData: Array<UserType>
    isFetching: boolean
    followingInProgress: boolean
    
    followThunkCreator: (userId: number) => void
    unFollowThunkCreator: (userId: number) => void
    onPageChanged: (page: number) => void
    getUsersThunkCreator: (currentPage: number, pageSize: number) => void
    setCurrentPageActionCreator: (page: number) => void
}

class UsersContainer extends React.Component<PropsType> {
    componentDidMount() {
        let { currentPage, pageSize } = this.props
        this.props.getUsersThunkCreator(currentPage, pageSize)
    }

    onPageChanged = (page: number) => {
        const { pageSize } = this.props
        this.props.setCurrentPageActionCreator(page)
        this.props.getUsersThunkCreator(page, pageSize)
    }


    render() {
        return <>
            {this.props.isFetching ? <MyPreloader /> : null}
            <Users
                totalUsersCount={this.props.totalUsersCount}
                pageSize={this.props.pageSize}
                currentPage={this.props.currentPage}
                usersData={this.props.usersData}
                follow={this.props.followThunkCreator}
                unFollow={this.props.unFollowThunkCreator}
                onPageChanged={this.onPageChanged}
                followingInProgress={this.props.followingInProgress}
            />
        </>
    }
}

const mapStateToProps = (state: AppStateType) => {
    return {
        usersData: getUsersSelector(state),
        pageSize: getPageSize(state),
        totalUsersCount: getTotalUsersCount(state),
        currentPage: getCurrentPage(state),
        isFetching: getIsFetching(state),
        followingInProgress: getFollowingInProgress(state),
    }
}


export default connect(mapStateToProps, {
        setCurrentPageActionCreator,
        getUsersThunkCreator,
        followThunkCreator,
        unFollowThunkCreator
        // @ts-ignore
    })(UsersContainer)